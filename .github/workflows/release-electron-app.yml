name: Release Electron App

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 22

      - run: npm ci

      - name: Build and Publish Electron App
        run: npm run build
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Get version from package.json
        id: get_version
        shell: pwsh
        run: |
          $version = node -p "require('./package.json').version"
          echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./out/Dolphin.Enquiries.Setup.${{ steps.get_version.outputs.version }}.exe"
          asset_name: "Dolphin.Enquiries.Setup.${{ steps.get_version.outputs.version }}.exe"
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload latest.yml
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./out/latest.yml"
          asset_name: "latest.yml"
          asset_content_type: text/yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}